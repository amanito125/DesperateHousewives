Правилният отговор е: Формулирайте правилната дефиниция за IEnumerator, като поставите липсващите думи в текста:

Предоставя [последователно, еднопосочно обхождане на колекция от произволен тип].
IEnumerator има следните методи: [Reset();, MoveNext();].
IEnumerator притежава свойството: [Current();].
След като имплементираме методите и свойството, можем да използваме [foreach() цикъл] за нашите User Defined Classes.


Напишете програма, която въвежда  цели числа разделени с  ", ". Изведете  нечетните числа в множеството, сортирани в нарастващ ред. 

Изберете какъв тип на структури от данни ще използвате за решаване на този проблем. Използвайте функционален програмен филтър, сортирайте и отпечатайте на конзолата колекцията от числа на един ред разделени с ", ".
За примерни входни/изходни данни ползвайте следните таблици

List<int> list = Console.ReadLine()
                .Split(", ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .Where(x => x % 2 != 0)
                .OrderBy(x => x)
                .ToList();

            Console.WriteLine(string.Join(", ", list));



Опишете какво представляват референциите към функции/методи в C#, като поставите липсващите думи в текста:

Ламбда функциите могат да бъдат записани в променливи от тип [делегат]. [Делегатите ] представляват специален тип [променливи], които съдържат [функции]. Типовете Func и Action са [generic ] и съдържат: на последна позиция [типа на връщаната стойност], а на първите позиции се задават [типовете на параметрите] на функциите. Променливите от тези типове са [референции] към функции. 



Посочете, кое от дадените твърдения е вярно за потоците в C#. Трябва да изберете вярно или невярно от падащото меню срещу всяко твърдение.

Потоците се използват, когато програмата трябва да прочете или запише данни от или във външен източник на данни. [Вярно]

Потокът е наредена последователност от байтове. [Вярно]

Тези байтове се изпращат един след друг и могат да се получават в ред различен от този в който са били изпратени. [Невярно]

Потоците осигуряват последователен достъп до своите елементи. [Вярно]

Потоците трябва да се отворят преди употреба и да се затворят накрая. [Вярно]

Можем да манипулираме подредбата на данните в потока. [Невярно]


 Модифицирайте кода,така че методът да работи с всякакъв тип данни.
public List<T> CreateList<T>(T item, int count)//2т
        {
            List<T> list = new List<T>();//2т
            for (int i = 0; i < count; i++)
            {
                list.Add(item);
            }
            return list;//2т
        }


Правилният отговор е:

Дефинирайте понятието функция, като попълните липсващите думи в текста.

Функцията е [специално отношение], където на [всички входни данни] има [еднозначен изход].



Какво ще се случи след изпълнението на програмата? Ще се изведе ли нещо като резултат и какъв ще бъде той? Запишете вашият отговор в полето.
2 4 6



string input = Console.ReadLine();
Func<string, int> parser = (x) => int.Parse(x);
int[] nums = input.Split().Select(parser).ToArray();
Console.WriteLine(string.Join(", ", nums));


Инициализираме масив от цели числа nums и друг масив от цели числа otherNums.

Конкатенираме (или слепваме) двата масива - масив otherNums се "залепя" след масива nums.

Отпечатваме на конзолата елементите от масива на един ред разделени със ", ". 

Очакван резултат:

1, 2, 3, 4, 5, 6, 7, 8, 9, 0




Обръщаме подредбата на числата (отзад-напред) с  (nums.Reverse) и запазваме новата подредба на масива nums.

Отпечатваме на конзолата елементите от масива на един ред разделени със ", ". 

Очакван резултат: 6, 5, 4, 3, 2, 1