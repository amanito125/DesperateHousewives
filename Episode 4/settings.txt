Открийте липсващите думи в текста:

Възможността референция към [базов клас ] да сочи обект както от базовия, така и обект от някой от производните класове е в основата на реализацията на [полиморфизма ] в езика C#.

Кои от следните примери потвърждават това правило, ако имате следната йерархия class Cat : class Animal ?

Cat cat  = new Animal(); [не]

Animal animal = new Animal(); [да]

Animal animal = new Cat(); [да]



abstract class BaseEmployee
    {
        public string Name { get; set; }
        public abstract double CalculateSalary(int workingHours);
    }

    class FullTimeEmployee : BaseEmployee
    {
        public override double CalculateSalary(int workingHours)
        {
            return 250 + workingHours * 10.80;
        }
    }

    class ContractEmployee : BaseEmployee
    {
        public override double CalculateSalary(int workingHours)
        {
            return 250 + workingHours * 20;
        }
    }



class Box<T>
    {
        private List<T> items;

        public Box()
        {
            items = new List<T>();  
        }
        public void Add(T item)
        {
            this.items.Add(item);
        }
    }




Дефинирайте понятието полиморфизъм в обектно-ориентираното програмиране като попълните липсващите думи в текста.

Полиморфизмът в обектно-ориентираното програмиране представлява свойството на обектите от един и същи [тип] да имат един и същи [интерфейс], но с [различна реализация] на този [интерфейс]. „Един [интерфейс], [множество от различни реализации]“. Чрез полиморфизма се постига по-голяма [абстракция ] и по-лесно [повторно използване] на кода.




Свържете кои от характеристиките се отнасят за абстрактните класове, кои за интерфейсите.

Може да наследи само един абстрактен клас. [Абстракция]

Могат да предоставят целия код и/или само детайлите, които трябва да се презапишат. [Абстракция]

Може да имплементира няколко интерфейса. [И за двете ]

Може да съдържа модификатори за достъп. [Абстракция]

Не може да предоставя никакъв код, предоставя само описание. [Интерфейси]                        
Нямат модификатори за достъп. Всичко е публично по подразбиране. [Интерфейси]





 class Animal
{
        public virtual void MakeTrick()
        {
            Console.WriteLine("No trick...");
        }
}
class Dog : Animal
{
        public override void MakeTrick()
        {
            Console.WriteLine("Give a paw...");
        }
}




MyClass<T>
{ 

}



Правилните отговори са: Можем да създаваме инстанции., Описва състоянието и поведението на обектите



Свържете кои от характеристиките се отнасят за абстракцията, кои за енкапсулацията.

  
Получава се чрез модификаторите за достъп (private, public, protected, internal) [Енкапсулация]

Постига се чрез интерфейси и абстрактни класове. [Абстракция]

Процес на скриване на подробностите на имплементацията и показване само на функционалностите към потребителя. [Абстракция]

Използва се, за  да скрива кода и информацията в един компонент, за да я защити от външния свят. [Енкапсулация]




Дефинирайте понятието наследяване от обектно-ориентираното програмиране като попълните липсващите думи в текста.

Наследяването е [основен принцип] от обектно-ориентираното програми­ране. То позволява на един клас да "наследява" [поведение и характе­ристики] от друг, по-общ клас. 

В .NET и други модерни езици за програмиране един клас може да наследи [само един друг клас].

Класът, който [дава ] своите членове на [дъщерния] си клас се нарича [базов] клас. А класът, който [получава] членове от [своя базов клас] - [подклас].





Правилният отговор е: Обяснете основните разлики между презареждане и презаписване на методи.

Методи с едно и също име, но различни сигнатури. [Презареждане на методи]
Може да се случи в същия клас или в негов подклас. [Презареждане на методи]
Може да се случи в подкласовете. [Презаписване на методи]
Трябва да има същия тип на връщана стойност. [Презаписване на методи]
При компилиране, според подадените параметри компилатора определя кой метод точно ще изпълни. [Презареждане на методи]
Модификатора за достъп не може да бъде по-ограничаващ. [Презаписване на методи]



Открийте разликите между клас и интерфейс. Кои от изброените твърдения се отнасят за класовете в C#, кои за интерфейсите?

Има както дефиниция, така и реализация. [Клас]
Има само дефиниция. [Интерфейс]

Не може да бъде инстанциран. [Интерфейс]

Може да бъде инстанциран. [Клас]
Може да съдържа членове, методи, заедно с дефиниция и реализация. [Клас]

Набор от дефиниции, които трябва да се приложат. [Интерфейс]


Посочете кое от изброените твърдение е вярно за интерфейсите в C#.
Правилните отговори са: Предоставя договор, определящ как да се създаде обект, без да се интересува от спецификата на това как обекта ще прави нещата., Това е референтен тип и включва само абстрактни членове като събития, методи, свойства и т.н. и няма реализации за нито един от своите членове.



Дефинирайте термина полиморфизъм в обектно-ориентираното програмиране, като поставите липсващите думи в текста.

Терминът полиморфизъм в обектно-ориентираното програмиране определя, че [едни и същи (еднотипни)] действия се реализират по [различен начин] в зависимост от обектите, върху които се прилагат. Такива действия се наричат [полиморфични]. За да се реализира [полиморфно действие], класовете на обектите, върху които се прилага това действие, трябва да имат [общ корен] т.е. да бъдат производни на [един и същи клас].





public List<T> CreateList<T>(T item, int count)//2т
        {
            List<T> list = new List<T>();//2т
            for (int i = 0; i < count; i++)
            {
                list.Add(item);
            }
            return list;//2т
        }



Правилните отговори са: Полиморфизъм по време на компилиране., Полиморфизъм по време на изпълнение. 

